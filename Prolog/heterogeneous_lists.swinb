<div class="notebook">

<div class="nb-cell markdown" name="md1">
Heterogeneous Lists in Prolog
</div>

<div class="nb-cell markdown" name="md2">
Example: A heterogeneous numerical list is given, composed of numbers, symbols and lists of numbers. Remove the sublists. Ex. [1,2,[3,4], [7], 3,a, [9,10,11], b] -&gt; [1,2,3,a,b]
</div>

<div class="nb-cell html" name="htm1">
Math model:
<p> process(l1l2...ln)= { [], if n=0  </p>
<p>                     { process(l2, .. ln) , if li_list(l1) </p>
<p>                     { l1 U process(l2..ln) , otherwise </p>
</div>

<div class="nb-cell program" name="p1">
%process(L -list, R -list)
%flow(i,i) (i, o)
process([],[]).
process([H|T], R):-
    is_list(H),
    process(T, R).
process([H|T], [H|R]):-
    atomic(H),
    process(T, R).
</div>

<div class="nb-cell query" name="q1">
process([1,2,[3,4], [7], 3,a, [9,10,11], b], R).
</div>

<div class="nb-cell markdown" name="md3">
A list of numbers and sublists of numbers is given. Substitute each sublist in which the sum of the elements is odd with the first element of that sublist.
Example: [1,2,[2,4],7,3,[4,6,7],[1],8,10,[3,2]] =&gt; [1,2, [2,4] ,7,3,4,1,8,10,3]
</div>

<div class="nb-cell html" name="htm2">
Math model:
<p> process(l1l2...ln)= { [], if n=0  </p>
<p>                     { l11 U process(l2, .. ln) , if is_list(l1) &amp; suma(l1)%2=1 </p>
<p>                     { l1 U process(l2..ln) , otherwise </p>

l1=l11 l12 ... l1m
</div>

<div class="nb-cell program" name="p2">
suma([],0).
suma([H|T], S):-
    suma(T, S1),
    S is H+S1.


%process(L-list, R -list)
%flow(i,i) (i, o)
process([],[]).
process([H|T], [H1|R]):-
    is_list(H),
    suma(H, S),
    S mod 2 =\= 0, %!, 
    H=[H1|_],
    process(T, R).
process([H|T], [H|R]):-
    not(is_list(H)),
    process(T,R).
process([H|T], [H|R]):-
    is_list(H),
    suma(H, S),
    S mod 2 =:= 0,
    process(T,R).
</div>

<div class="nb-cell query" name="q2">
process([1,2,[2,4],7,3,[4,6,7],[1],8,10,[3,2]] , R).
</div>

<div class="nb-cell markdown" name="md4">
You are given a heterogeneous list, made of numbers and lists of numbers. You will have to remove the odd numbers from the sub lists that have a mountain aspect (a list has a mountain aspect if it is made of an increasing sequence of numbers, followed by a decreasing sequence of numbers).
For example:
[1,2,[1,2,3,2], 6,[1,2],[1,4,5,6,7,1],8,2,[4,3,1],11,5,[6,7,6],8]
=&gt; [1,2,[2,2], 6, [1,2], [4,6], 8, 2, [4,3,1], 11,5,[6,6],8]
</div>

<div class="nb-cell html" name="htm3">
-remOdd

Math model:
<p> remOdd(l1l2...ln)= { [] , if n=0   </p>
<p>                    { remOdd(l2..ln) , if l1%2=1 </p>
<p>                    { l1 U remOdd (l2..ln), otherwise </p>

-mountain aspect 3 2 1 
 flag = 0 going up   ;  1 going down
Math model:
<p> mountain(l1l2...ln, flag)= {   true , flag=1 , n=1 </p>
<p>                     {  mountain(l2...ln, 0) , if l1<l2 &="" flag="0" <="" p="">
</l2></p><p>                     {  mountain(l2...ln, 1) , if l1&gt;=l2 &amp; flag=0 </p>
<p>                     {  mountain(l2...ln, 1) , if l1&gt;l2 &amp; flag=1 </p>
<p>                     {  false, otherwise (n=1, flag=0; l1<l2 &="" flag="1)" <="" p="">

</l2></p><p>   mainM(l1l2..ln)= { mountain(l1l2..ln, 0), if l1<l2 <="" p="">
</l2></p><p>                   { false, otherwise                 </p>
  
Math model:
<p> process(l1l2...ln)= { [], if n=0  </p>
<p>                     { remOdd(l1) U process(l2, .. ln) , if is_list(l1) and mainM(l1) </p>
<p>                     { l1 U process(l2..ln) , otherwise </p>
</div>

<div class="nb-cell program" name="p3">
%mountain(L -list, F -number)
%flow(i,i)
mountain([_], 1).
mountain([H1, H2|R], 0):-
    H1&lt;H2,
    mountain([H2|R], 0).
mountain([H1, H2|R], _):-
    H1&gt;H2,
    mountain([H2|R], 1).
%mountain([H1, H2|R], 1):-
%    H1&gt;H2,
%    mountain([H2|R], 1).

mainM(L):-
    L=[H1,H2|_],
    H1&lt;H2,
    mountain(L, 0).

%remOdd(L-list, R -list)
%flow(i,o) (i,i)
remOdd([],[]).
remOdd([H|T], R):-
    H mod 2 =:=1, !,
    remOdd(T, R).
remOdd([H|T], [H|R]):-
    remOdd(T,R).

%process(L-list, R-list)
%flow (i,o) (i,i)
process([],[]).
process([H|T], [R2 | TR]):-
    %is_list(H),
    H=[H1,H2| _],
    H1&lt;H2,
    mountain(H, 0), !,
    remOdd(H, R2),
    process(T, TR).
process([H|T], [H|R]):-
    process(T,R).
</div>

<div class="nb-cell query" name="q3">
mountain(5, 0).
</div>

<div class="nb-cell program" name="p4">
%odd numbers
%flow (i)   (o)
odd(1).
odd(3).
odd(5).
odd(7).
odd(9).

%even(o)

even(X):- odd(N1), odd(N2), X is N1+N2, X&gt;9, ! .
even(X):- odd(N1), X is N1*2, X&gt;9.
</div>

<div class="nb-cell query" name="q4">
odd(R).
</div>

<div class="nb-cell query" name="q5">
even(R).
</div>

<div class="nb-cell query" name="q6">

</div>

<div class="nb-cell markdown" name="md5">
You are given a heterogeneous list, made of atoms and lists of numbers. Remove all increasing sequences of numbers from the sublists of the list. Egz, transform([[1, 2, 4, 4, 7, 9, 0, 1, 1], 3,[], 24, [], a, [12, 4], [3, 5], b],R). will result in R = [[1], 3, [], 24, [], a, [12, 4], [], b]
We will use predicate removeInc (seminar 2, problem 3) on a list.
</div>

<div class="nb-cell html" name="htm4">
- transform to process the list
- remove inc sequences
</div>

<div class="nb-cell html" name="htm5">
1 2 3 1 

<p> remInc(l1l2...ln)= { [], if n=0  </p>
<p>                     {   [l1]     , n=1 </p>
<p>                     {    []    , n=2 &amp; l1<l2 <="" p="">
</l2></p><p>                     {  remInc(l2..ln)  , if l1<l2<l3 <="" p="">
</l2<l3></p><p>                     {  remInc(l3..ln)  , if l1<l2, l2="">l3 </l2,></p>
<p>                     {  l1 U remInc(l2..ln)  , l1&gt;l2 </p>
<p>                     {    [l1, l2]    , n=2 &amp; l1&gt;l2 </p>
</div>

</div>
