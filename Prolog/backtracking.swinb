<div class="notebook">

<div class="nb-cell markdown" name="md1">
Backtracking in Prolog
</div>

<div class="nb-cell program" name="p1">
%Permutations
%perm(l1l2..ln)={ [], if L=[]
%               { insert(l1,perm(l2..ln))

%insert(e, l1l2..ln)={ e U l1l2..ln 
%                    { l1 U insert(e, l2..ln)

%insert(E,L-list, R-list)
%flow(i,i,o)
insert(E, L, [E|L]).
insert(E, [H|T], [H|R]):-
    insert(E,T,R).

%perm(L-list, R-list)  (i,o)
perm([],[]).
perm([H|T], R):-
    perm(T, TR),
    insert(H,TR, R).

%combination of K elements from list L with n elements (1&lt;=K&lt;=n), 
%comb(l1l2..ln, k)={l1 , if k=1  , n&gt;=1
%                  {comb(l2..ln, k), k&gt;=1
%                  {l1 U comb(l2..ln, k-1) , k&gt;1

%comb(L-list, K-num, R-list) (i,i,o)
comb([H|_], 1, [H]).
comb([_|T], K, R):-
    comb(T,K,R).
comb([H|T], K, [H|R]):-
    K&gt;1,
    K1 is K-1,
    comb(T,K1, R).

lazyarr(L,K,R):-
    comb(L,K,C),
    perm(C,R).

%arrangement of K elements from list L with n elements (1&lt;=K&lt;=n), 
%arr(l1l2..ln, k)={l1 , if k=1  , n&gt;=1
%                  {arr(l2..ln, k), k&gt;=1
%                  {insert(l1, arr(l2..ln, k-1)) , k&gt;1

%arr(L-list, K-num, R-list) (i,i,o)
arr([H|_], 1, [H]).
arr([_|T], K, R):-
    arr(T,K,R).
arr([H|T], K, R1):-
    K&gt;1,
    K1 is K-1,
    arr(T,K1, R),
    insert(H,R, R1).
</div>

<div class="nb-cell query" name="q1">
insert(11,[1,2,3,4], R).
</div>

<div class="nb-cell query" name="q2">
findall(R, insert(11, [1,2,3,4], R), RL).
</div>

<div class="nb-cell query" name="q3">
findall(X, perm([1,2,3],X), R).
</div>

<div class="nb-cell query" name="q4">
findall(X, comb([1,2,3],2, X), R).
</div>

<div class="nb-cell query" name="q5">
findall(X, lazyarr([1,2,3,4],2, X), R).
</div>

<div class="nb-cell query" name="q6">
findall(X, arr([1,2,3,4],2, X), R).
</div>

<div class="nb-cell markdown" name="md2">
Given a list L, generate the list of all arrangements of K elements from the list that have product P and sum S. Ex. L=[1,2,3,10], K=2, P=30, S=13 then result R = [[3, 10], [10, 3]].
</div>

<div class="nb-cell program" name="p2">
solve(L,K, P,S, A):-
    arr(L,K,A),
    suma(A,S),
    prod(A,P).

allSolutions(L,K,P,S,R):-
    findall(X, solve(L,K,P,S,X), R).
</div>

<div class="nb-cell markdown" name="md3">
We are given a sequence a1...an composed of distinct integers numbers. We have to display all the subsequences which have a valley aspect. For example, for the list [5, 3, 4, 2, 7, 11, 1, 8, 6], some of the solutions would be [5, 4, 3, 11], [3, 2, 1, 4, 5, 7, 8], [11, 6, 1, 3, 4, 5], etc.
</div>

<div class="nb-cell program" name="p3">
%valley - decreasing and increasing

%subsets of a list
%subs(l1l2.lln)={ [] , if n=0
%               { l1 U subs(l2..ln), n&gt;0
%               {subs(l2.ln) , n&gt;0 

%subs(L-lis, R-list) (i,o)
subs([],[]).
subs([H|T], [H|R]):-
    subs(T,R).
subs([_|T], R):-
    subs(T,R).


%insert(E,L-list, R-list)
%flow(i,i,o)
insert(E, L, [E|L]).
insert(E, [H|T], [H|R]):-
    insert(E,T,R).

%perm(L-list, R-list)  (i,o)
perm([],[]).
perm([H|T], R):-
    perm(T, TR),
    insert(H,TR, R).

%valley flag 1 decreasing , 0 increasing
%valley(l1l2ln, flag)={valley(l2..ln, 1) , if l1&gt;l2, flag=1
%                     {valley(l2..ln, 0) , if l1&lt;l2, flag=1 or 0
%                     {true, n=1, flag=0
%                    
%mainV(l1l2..ln)= valley(l1l2..ln, 1), if l1&gt;l2

%valley(L-list, F-flag) 
%flow(i,i)
valley([H1,H2|T], 1):-
    H1&gt;H2,
    valley([H2|T],1).
valley([H1,H2|T], _):-
    H1&lt;H2,
    valley([H2|T],0).
valley([_],0).

mainV(L):-
    L=[H1,H2|_],
    H1&gt;H2,
    valley(L,1).

onesol(L, SP):-
    subs(L, SS),
    perm(SS,SP),
    mainV(SP).

allSolutions1(L,R):-
    findall(X, onesol(L,X),R).
</div>

<div class="nb-cell query" name="q7">
allSolutions1( [5, 3, 4, 2, 7, 11, 1, 8, 6], R).
</div>

<div class="nb-cell program" name="p4">
% element2(l1l2..ln)={ (l1 , l2..ln)
%                    { (e, l1 U Rest), if  element2(l2..ln)= (e, Rest)
%flow i, o, o
element2([H|_], H, []).
element2([H|T],E, [H|Rest]):-
    element2(T,E, Rest).


% 1 for decreasing, 0 for increasing
%generate(l1l2..ln, c1c2..cm, Flag)={ c1c2..cm, if flag=1
%           { generate(Rest, e U c1c2..cm,0) , if flag=0, e&lt;c1, element2(L)=(e, Rest)
%           { generate(Rest, e U c1c2..cm,1) , if (flag=0 or 1), e&gt;c1, element2(L)=(e, Rest)

%start(l1l2..ln)= generate(Rest2, [e1,e2],0) , if  element2(L)=(e1, Rest), 
%                                                  element2(Rest)=(e2, Rest2), e1&lt;e2
                  

%generate(L-list, Cand -list, Flag -number, R-list)
generate(_, Cand, 1, Cand).
generate(L, [C1|Cand], 0, R):-
    element2(L, E, Rest),
    E&lt;C1,
    generate(Rest, [E,C1|Cand], 0, R).
generate(L, [C1|Cand], _, R):-
    element2(L, E, Rest),
    E&gt;C1,
    generate(Rest, [E,C1|Cand] ,1, R).

start(L, R):-
    element2(L, E1, Rest),
    element2(Rest, E2, Rest2),
    E1&lt;E2,
    generate(Rest2, [E1, E2], 0, R).

allSol(L,R):-
    findall(X, start(L,X), R).
</div>

<div class="nb-cell query" name="q8">
allSol([5, 3, 4, 2, 7, 11, 1, 8, 6],R).
</div>

</div>
